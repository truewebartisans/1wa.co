<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Posts on True web artisans</title>
        <link>https://truewebartisans.com/ru/posts/</link>
        <description>Recent content in Posts on True web artisans</description>
        <generator>Hugo -- gohugo.io</generator>
        <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc-nd/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC-ND 4.0&lt;/a&gt;</copyright>
        <lastBuildDate>Thu, 30 May 2019 23:10:00 +0300</lastBuildDate>
        <atom:link href="https://truewebartisans.com/ru/posts/index.xml" rel="self" type="application/rss+xml" />
        
        <item>
            <title>Создание нативного десктоп приложения для macOS на Golang и React.js с полной защитой кода (без магии)</title>
            <link>https://truewebartisans.com/ru/posts/2019/05/native-macos-app-on-golang-and-react/</link>
            <pubDate>Thu, 30 May 2019 23:10:00 +0300</pubDate>
            
            <guid>https://truewebartisans.com/ru/posts/2019/05/native-macos-app-on-golang-and-react/</guid>
            <description>Введение Добро пожаловать в очередную статью из цикла «How to»! На этот раз, мы разберём создание нативного десктоп приложения для macOS, напишем немного кода на Golang и React.js, который будет обладать защитой от копирования.
В этот раз, постараемся обойтись без магии!
Цели статьи  Показать один из самых простых способов создания нативного десктоп приложения для macOS на Golang; Показать вариант защиты кода вашего приложения от изменения третьими лицами (например, при коммерческом распространении);  Инструменты Рабочее окружение  Go 1.</description>
            <content type="html"><![CDATA[

<h2 id="введение">Введение</h2>

<p>Добро пожаловать в очередную статью из цикла «How to»! На этот раз, мы разберём создание нативного десктоп приложения для macOS, напишем немного кода на Golang и React.js, который будет обладать защитой от копирования.</p>

<p>В этот раз, постараемся обойтись без магии!</p>

<h3 id="цели-статьи">Цели статьи</h3>

<ol>
<li>Показать один из самых простых способов создания нативного десктоп приложения для macOS на Golang;</li>
<li>Показать вариант защиты кода вашего приложения от изменения третьими лицами (например, при коммерческом распространении);</li>
</ol>

<h2 id="инструменты">Инструменты</h2>

<h3 id="рабочее-окружение">Рабочее окружение</h3>

<ul>
<li>Go <code>1.12.5</code>;</li>
<li>Node.js <code>12.3.1</code>;</li>
</ul>

<h3 id="операционная-система">Операционная система</h3>

<ul>
<li>Apple macOS <code>10.14.5</code> Mojave (darwin/amd64);</li>
</ul>

<h3 id="менеджер-пакетов-и-зависимостей">Менеджер пакетов и зависимостей</h3>

<ul>
<li>dep <code>0.5.3</code> (Golang);</li>
<li>npm <code>6.9.0</code> (Node.js);</li>
</ul>

<h2 id="используемые-пакеты-golang">Используемые пакеты Golang</h2>

<ul>
<li><code>net/http</code> — стандартный пакет для создания веб-сервера (<a href="https://golang.org/pkg/net/http/" target="_blank">godoc</a>);</li>
<li><code>gobuffalo/packr</code> — пакет для упаковки всех необходимых исходников в один исполняемый бинарный файл (<a href="https://github.com/gobuffalo/packr" target="_blank">GitHub</a>);</li>
<li><code>zserge/webview</code> — кросс-платформенный пакет для создания нативного окна операционной системы со встроенным браузером (<a href="https://github.com/zserge/webview" target="_blank">GitHub</a>);</li>
</ul>

<h2 id="используемые-библиотеки-node-js">Используемые библиотеки Node.js</h2>

<ul>
<li><code>facebook/create-react-app</code> — фронтенд для macOS-приложения (<a href="https://github.com/facebook/create-react-app" target="_blank">GitHub</a>);</li>
<li><code>axios/axios</code> — для более простого написания AJAX-запросов (<a href="https://github.com/axios/axios" target="_blank">GitHub</a>);</li>
</ul>

<h2 id="теоретическая-база">Теоретическая база</h2>

<p>Чтобы лучше понять происходящее, предлагаю вам изучить работу некоторых пакетов, на которые мы будем опираться и использовать.</p>

<h3 id="net-http">net/http</h3>

<p>Пакет, который обеспечивает реализацию HTTP клиента и сервера. Входит в состав стандартной поставки Go и не требует отдельной установки и настройки.</p>

<p>Он интересен нам, так как очень прост в понимании, имеет хорошую документацию и обладает функцией <code>http.FileServer()</code>.</p>

<p>Более подробно, читайте в <a href="https://golang.org/pkg/net/http/#pkg-overview" target="_blank">официальной документации</a>.</p>

<h4 id="http-fileserver">http.FileServer()</h4>

<p>Эта функция является ключевой и даёт полный доступ веб-серверу к указанной папке и всем её файлам. То есть, функция <code>http.FileServer()</code> позволяет смонтировать папку на любой указанный адрес (route) веб-сервера.</p>

<p>Например, смонтируем корневую папку <code>./static/images/photos</code> так, чтобы она была доступна по адресу <code>http://localhost:8000/photos</code>:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#a6e22e">http</span>.<span style="color:#a6e22e">Handle</span>(<span style="color:#e6db74">&#34;/photos&#34;</span>, <span style="color:#a6e22e">http</span>.<span style="color:#a6e22e">FileServer</span>(<span style="color:#e6db74">&#34;./static/images/photos&#34;</span>))</code></pre></div>
<h3 id="gobuffalo-packr">gobuffalo/packr</h3>

<p>Пакет с говорящим названием. Именно он позволит нам упаковать все необходимые файлы в один бинарный файл.</p>

<blockquote>
<p>Обратите внимание, что в статье описана работа с веткой <code>v1</code>.</p>
</blockquote>

<p>Допустим, у нас есть следующая структура каталога проекта:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">tree .

├── main.go
└── templates
    ├── admin
    │   └── index.html
    └── index.html</code></pre></div>
<p>Файл <code>./main.go</code> содержит:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#f92672">package</span> <span style="color:#a6e22e">main</span>

<span style="color:#f92672">import</span> (
	<span style="color:#e6db74">&#34;fmt&#34;</span>

	<span style="color:#e6db74">&#34;github.com/gobuffalo/packr&#34;</span>
)

<span style="color:#66d9ef">func</span> <span style="color:#a6e22e">main</span>() {
	<span style="color:#75715e">// Папка, с шаблонами, которые необходимо
</span><span style="color:#75715e"></span>	<span style="color:#75715e">// добавить в бинарный файл (упаковать)
</span><span style="color:#75715e"></span>	<span style="color:#a6e22e">box</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">packr</span>.<span style="color:#a6e22e">NewBox</span>(<span style="color:#e6db74">&#34;./templates&#34;</span>)

	<span style="color:#75715e">// Производим поиск файла внутри папки
</span><span style="color:#75715e"></span>	<span style="color:#a6e22e">s</span>, <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">box</span>.<span style="color:#a6e22e">FindString</span>(<span style="color:#e6db74">&#34;admin/index.html&#34;</span>)

	<span style="color:#75715e">// Если файл не найден, то ошибка
</span><span style="color:#75715e"></span>	<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
		<span style="color:#a6e22e">log</span>.<span style="color:#a6e22e">Fatal</span>(<span style="color:#a6e22e">err</span>)
	}

	<span style="color:#75715e">// Выводим содержимое файла
</span><span style="color:#75715e"></span>	<span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Println</span>(<span style="color:#a6e22e">s</span>)
}</code></pre></div>
<p>Теперь скомпилируем проект в исполняемый бинарный файл. При этом, пакет <code>packr</code> упакует в него и всё содержимое папки <code>./templates</code>:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-powershell" data-lang="powershell">packr build ./main.go</code></pre></div>
<p>Если вы хотите создать бинарный файл для ОС или архитектуры, отличной от той, с которой вы работаете сейчас, то вызывайте <code>packr</code> вот так:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-powershell" data-lang="powershell"><span style="color:#75715e"># Пример для GNU/Linux, x64 бит</span>
GOOS=linux GOARCH=amd64 packr build ./main.go</code></pre></div>
<h3 id="zserge-webview">zserge/webview</h3>

<p>Крошечный кросс-платформенный пакет для веб-просмотра, используемый для создания современных графических интерфейсов.</p>

<blockquote>
<p>Обратите внимание, что в статье описана работа с версией <code>0.1.0</code>.</p>
</blockquote>

<p>Файл <code>./main.go</code> содержит:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#f92672">package</span> <span style="color:#a6e22e">main</span>

<span style="color:#f92672">import</span> <span style="color:#e6db74">&#34;github.com/zserge/webview&#34;</span>

<span style="color:#66d9ef">func</span> <span style="color:#a6e22e">main</span>() {
	<span style="color:#75715e">// Открыть главную страницу Google в окне, с размером 1024х768 px,
</span><span style="color:#75715e"></span>	<span style="color:#75715e">// без изменения размеров окна
</span><span style="color:#75715e"></span>	<span style="color:#a6e22e">webview</span>.<span style="color:#a6e22e">Open</span>(<span style="color:#e6db74">&#34;Google&#34;</span>, <span style="color:#e6db74">&#34;https://google.com&#34;</span>, <span style="color:#ae81ff">1024</span>, <span style="color:#ae81ff">768</span>, <span style="color:#66d9ef">false</span>)
}</code></pre></div>
<p>Чтобы создать macOS-приложение, перейдём в консоль и выполним:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-powershell" data-lang="powershell"><span style="color:#75715e"># Создание структуры директорий macOS-приложения</span>
mkdir -p example.app/Contents/MacOS

<span style="color:#75715e"># Компилируем ./main.go в папку приложения</span>
go build -o example.app/Contents/MacOS/example

<span style="color:#75715e"># Запуск приложения</span>
open example.app</code></pre></div>
<h2 id="структура-macos-приложения">Структура macOS-приложения</h2>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">tree .

├── vendor
├── ui
│   ├── build
│   ├── node_modules
│   ├── public
│   ├── src
│   ├── package-lock.json
│   └── package.json
├── helloworld.app
├── Gopkg.lock
├── Gopkg.toml
└── main.go</code></pre></div>
<h3 id="описание-основных-файлов-и-папок">Описание основных файлов и папок</h3>

<ul>
<li><code>vendor</code> — тут будут храниться все пакеты, установленные с помощью <code>dep</code>;</li>
<li><code>ui</code> — папка с React.js приложением (фронтенд);

<ul>
<li><code>build</code> — папка с production-версией приложения после сборки;</li>
<li><code>src</code> — папка с исходным кодом React-приложения;</li>
<li><code>package.json</code> — файл зависимостей <code>npm</code>;</li>
</ul></li>
<li><code>helloworld.app</code> — приложение macOS (специально подготовленная папка);</li>
<li><code>Gopkg.toml</code> — файл зависимостей <code>dep</code>;</li>
<li><code>main.go</code> — исходный код Golang-приложения (бэкенд);</li>
</ul>

<h2 id="пишем-код">Пишем код</h2>

<p>Хватит теории. Как говорил, без преувеличения, один из великих программистов нашего времени Линус Торвальдс:</p>

<blockquote>
<p>Talk is cheap. Show me the code.</p>

<p>— Linus Torvalds</p>
</blockquote>

<p>Давайте последуем этому совету и напишем немного кода.</p>

<p>Я не буду разбирать каждую строку кода в отдельности, так как считаю это избыточным и контр-продуктивным. Все листинги кода — снабжены подробными комментариями.</p>

<h3 id="памятка-для-начинающих-copy-paste-разработчиков">Памятка для начинающих/copy-paste разработчиков</h3>

<p>Отлично, когда есть полный листинг кода в конце статьи, правда? Можно сразу же, не вчитываясь в текст, скопировать весь код программы и посмотреть её выполнение&hellip;</p>

<p>На этом моменте, я хотел бы обратиться ко всем читателям, которые не хотят тратить время на теорию:</p>

<blockquote>
<p>Не копируйте бездумно код из Интернета! Это не поможет ни вам (в понимании кода и предмета статьи), ни автору (при объяснении/помощи в комментариях).</p>
</blockquote>

<h3 id="фронтенд-для-приложения">Фронтенд для приложения</h3>

<p>React.js — это мощная, но в то же время, простая в изучении JavaScript-библиотека для создания пользовательских интерфейсов, которая отлично подойдёт нам для реализации фронтенд части приложения.</p>

<blockquote>
<p>В рамках данной статьи, мы <strong>не будем</strong> использовать ничего, кроме стандартной «It works!» страницы React.js.</p>
</blockquote>

<p>Как и всё в современном фронтенде, мы начинаем с установки React.js и всех необходимых вспомогательных библиотек.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-powershell" data-lang="powershell"><span style="color:#75715e"># Создадим папку для приложения и перейдём в неё</span>
mkdir ~/helloworld_project &amp;&amp; cd ~/helloworld_project

<span style="color:#75715e"># Согласно структуре готового приложения,</span>
<span style="color:#75715e"># установим React.js в директорию ./ui</span>
npx create-react-app ui

<span style="color:#75715e"># Перейдём в папку и проверим, что всё работает</span>
cd ui &amp;&amp; npm start &amp;&amp; open http<span style="color:#960050;background-color:#1e0010">:</span>//localhost<span style="color:#960050;background-color:#1e0010">:</span>3000

<span style="color:#75715e"># Далее, остановим dev-сервер (нажмите Crtl+C)</span>
<span style="color:#75715e"># и установим библиотеку axios</span>
npm i --save axios</code></pre></div>
<h4 id="листинг-файла-ui-src-app-js">Листинг файла ./ui/src/App.js</h4>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-jsx" data-lang="jsx"><span style="color:#75715e">// Импортируем React и методы хуков
</span><span style="color:#75715e"></span><span style="color:#66d9ef">import</span> <span style="color:#a6e22e">React</span>, { <span style="color:#a6e22e">useState</span>, <span style="color:#a6e22e">useEffect</span> } <span style="color:#a6e22e">from</span> <span style="color:#e6db74">&#34;react&#34;</span>;

<span style="color:#75715e">// Импортируем библиотеку axios
</span><span style="color:#75715e"></span><span style="color:#66d9ef">import</span> <span style="color:#a6e22e">axios</span> <span style="color:#a6e22e">from</span> <span style="color:#e6db74">&#34;axios&#34;</span>;

<span style="color:#75715e">// Импортируем логотип и CSS
</span><span style="color:#75715e"></span><span style="color:#66d9ef">import</span> <span style="color:#a6e22e">logo</span> <span style="color:#a6e22e">from</span> <span style="color:#e6db74">&#34;./logo.svg&#34;</span>;
<span style="color:#66d9ef">import</span> <span style="color:#e6db74">&#34;./App.css&#34;</span>;

<span style="color:#66d9ef">function</span> <span style="color:#a6e22e">App</span>() {
  <span style="color:#75715e">// Определяем хранилище для полученных данных
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">const</span> [<span style="color:#a6e22e">state</span>, <span style="color:#a6e22e">setState</span>] <span style="color:#f92672">=</span> <span style="color:#a6e22e">useState</span>([]);

  <span style="color:#75715e">// Получение данных из AJAX запроса.
</span><span style="color:#75715e"></span>  <span style="color:#75715e">// Помните, что функция, переданная в useEffect, будет запущена
</span><span style="color:#75715e"></span>  <span style="color:#75715e">// после того, как рендер будет зафиксирован на экране.
</span><span style="color:#75715e"></span>  <span style="color:#75715e">// См. https://reactjs.org/docs/hooks-reference.html#useeffect
</span><span style="color:#75715e"></span>  <span style="color:#a6e22e">useEffect</span>(() =&gt; {
    <span style="color:#a6e22e">axios</span>
      .<span style="color:#a6e22e">get</span>(<span style="color:#e6db74">&#34;/hello&#34;</span>) <span style="color:#75715e">// GET-запрос на URL /hello
</span><span style="color:#75715e"></span>      .<span style="color:#a6e22e">then</span>(<span style="color:#a6e22e">resp</span> =&gt; <span style="color:#a6e22e">setState</span>(<span style="color:#a6e22e">resp</span>.<span style="color:#a6e22e">data</span>)) <span style="color:#75715e">// сохраняем ответ в state
</span><span style="color:#75715e"></span>      .<span style="color:#66d9ef">catch</span>(<span style="color:#a6e22e">err</span> =&gt; <span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">log</span>(<span style="color:#a6e22e">err</span>)); <span style="color:#75715e">// ловим ошибку, если возникла
</span><span style="color:#75715e"></span>  });

  <span style="color:#66d9ef">return</span> (
    &lt;<span style="color:#f92672">div</span> <span style="color:#a6e22e">className</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;App&#34;</span>&gt;
      &lt;<span style="color:#f92672">header</span> <span style="color:#a6e22e">className</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;App-header&#34;</span>&gt;
        &lt;<span style="color:#f92672">img</span> <span style="color:#a6e22e">src</span><span style="color:#f92672">=</span><span style="color:#e6db74">{logo}</span> <span style="color:#a6e22e">className</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;App-logo&#34;</span> <span style="color:#a6e22e">alt</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;logo&#34;</span> /&gt;
        &lt;<span style="color:#f92672">p</span>&gt;<span style="color:#a6e22e">Hello</span>, {<span style="color:#a6e22e">state</span>.<span style="color:#a6e22e">text</span>}<span style="color:#f92672">!</span>&lt;/<span style="color:#f92672">p</span>&gt;
        &lt;<span style="color:#f92672">a</span>
          <span style="color:#a6e22e">className</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;App-link&#34;</span>
          <span style="color:#a6e22e">href</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;https://reactjs.org&#34;</span>
          <span style="color:#a6e22e">target</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;_blank&#34;</span>
          <span style="color:#a6e22e">rel</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;noopener noreferrer&#34;</span>
        &gt;
          <span style="color:#a6e22e">Learn</span> <span style="color:#a6e22e">React</span>
        &lt;/<span style="color:#f92672">a</span>&gt;
      &lt;/<span style="color:#f92672">header</span>&gt;
    &lt;/<span style="color:#f92672">div</span>&gt;
  );
}

<span style="color:#66d9ef">export</span> <span style="color:#66d9ef">default</span> <span style="color:#a6e22e">App</span>;</code></pre></div>
<p>Вот и всё, фронтенд для приложения готов! 👌</p>

<h3 id="бэкенд-для-приложения">Бэкенд для приложения</h3>

<p>Установим необходимые пакеты:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-powershell" data-lang="powershell">dep ensure -add github.com/gobuffalo/packr
dep ensure -add github.com/zserge/webview</code></pre></div>
<p>Также, нам потребуется утилита <code>packr</code>, которая должна быть доступна для вызова из консоли в <code>$GOPATH/bin/packr</code>:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-powershell" data-lang="powershell">go get -u github.com/gobuffalo/packr/packr</code></pre></div>
<h4 id="листинг-файла-main-go">Листинг файла ./main.go</h4>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#f92672">package</span> <span style="color:#a6e22e">main</span>

<span style="color:#f92672">import</span> (
	<span style="color:#e6db74">&#34;encoding/json&#34;</span>
	<span style="color:#e6db74">&#34;net/http&#34;</span>

	<span style="color:#e6db74">&#34;github.com/gobuffalo/packr&#34;</span>
	<span style="color:#e6db74">&#34;github.com/zserge/webview&#34;</span>
)

<span style="color:#75715e">// Message : структура для сообщения
</span><span style="color:#75715e"></span><span style="color:#66d9ef">type</span> <span style="color:#a6e22e">Message</span> <span style="color:#66d9ef">struct</span> {
	<span style="color:#a6e22e">Text</span> <span style="color:#66d9ef">string</span> <span style="color:#e6db74">`json:&#34;text&#34;`</span>
}

<span style="color:#66d9ef">func</span> <span style="color:#a6e22e">main</span>() {
	<span style="color:#75715e">// Определяем папку, которая будет упакована.
</span><span style="color:#75715e"></span>	<span style="color:#75715e">// Так как мы работаем с React.js, то после сборки,
</span><span style="color:#75715e"></span>	<span style="color:#75715e">// production-версия будет находиться в папке ./build,
</span><span style="color:#75715e"></span>	<span style="color:#75715e">// в корне React.js приложения
</span><span style="color:#75715e"></span>	<span style="color:#a6e22e">folder</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">packr</span>.<span style="color:#a6e22e">NewBox</span>(<span style="color:#e6db74">&#34;./ui/build&#34;</span>)

	<span style="color:#75715e">// Монтируем папку ./ui/build в корневой роут
</span><span style="color:#75715e"></span>	<span style="color:#a6e22e">http</span>.<span style="color:#a6e22e">Handle</span>(<span style="color:#e6db74">&#34;/&#34;</span>, <span style="color:#a6e22e">http</span>.<span style="color:#a6e22e">FileServer</span>(<span style="color:#a6e22e">folder</span>))

	<span style="color:#75715e">// Создаём роут для функции showMessage
</span><span style="color:#75715e"></span>	<span style="color:#a6e22e">http</span>.<span style="color:#a6e22e">HandleFunc</span>(<span style="color:#e6db74">&#34;/hello&#34;</span>, <span style="color:#a6e22e">showMessage</span>)

	<span style="color:#75715e">// Старт сервера на 8000 порту.
</span><span style="color:#75715e"></span>	<span style="color:#75715e">// Определяем, как горутину, чтобы не
</span><span style="color:#75715e"></span>	<span style="color:#75715e">// блокировать выполнение остальной
</span><span style="color:#75715e"></span>	<span style="color:#75715e">// части программы
</span><span style="color:#75715e"></span>	<span style="color:#66d9ef">go</span> <span style="color:#a6e22e">http</span>.<span style="color:#a6e22e">ListenAndServe</span>(<span style="color:#e6db74">&#34;:8000&#34;</span>, <span style="color:#66d9ef">nil</span>)

	<span style="color:#75715e">// Откроем webview с параметрами:
</span><span style="color:#75715e"></span>	<span style="color:#75715e">//  - имя: Golang App
</span><span style="color:#75715e"></span>	<span style="color:#75715e">//  - адрес: http://localhost:8000
</span><span style="color:#75715e"></span>	<span style="color:#75715e">//  - размеры окна: 800x600 px
</span><span style="color:#75715e"></span>	<span style="color:#75715e">//  - изменяемый размер окна: true
</span><span style="color:#75715e"></span>	<span style="color:#a6e22e">webview</span>.<span style="color:#a6e22e">Open</span>(<span style="color:#e6db74">&#34;Golang App&#34;</span>, <span style="color:#e6db74">&#34;http://localhost:8000&#34;</span>, <span style="color:#ae81ff">800</span>, <span style="color:#ae81ff">600</span>, <span style="color:#66d9ef">true</span>)
}

<span style="color:#66d9ef">func</span> <span style="color:#a6e22e">showMessage</span>(<span style="color:#a6e22e">w</span> <span style="color:#a6e22e">http</span>.<span style="color:#a6e22e">ResponseWriter</span>, <span style="color:#a6e22e">r</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">http</span>.<span style="color:#a6e22e">Request</span>) {
	<span style="color:#75715e">// Определение JSON данных
</span><span style="color:#75715e"></span>	<span style="color:#a6e22e">message</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">Message</span>{<span style="color:#e6db74">&#34;World&#34;</span>}

	<span style="color:#75715e">// Вернуть JSON для отображения
</span><span style="color:#75715e"></span>	<span style="color:#a6e22e">output</span>, <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">json</span>.<span style="color:#a6e22e">Marshal</span>(<span style="color:#a6e22e">message</span>)

	<span style="color:#75715e">// Отлавливаем ошибки
</span><span style="color:#75715e"></span>	<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
		<span style="color:#a6e22e">http</span>.<span style="color:#a6e22e">Error</span>(<span style="color:#a6e22e">w</span>, <span style="color:#a6e22e">err</span>.<span style="color:#a6e22e">Error</span>(), <span style="color:#a6e22e">http</span>.<span style="color:#a6e22e">StatusInternalServerError</span>)
		<span style="color:#66d9ef">return</span>
	}

	<span style="color:#75715e">// Задаём заголовок Content-Type
</span><span style="color:#75715e"></span>	<span style="color:#a6e22e">w</span>.<span style="color:#a6e22e">Header</span>().<span style="color:#a6e22e">Set</span>(<span style="color:#e6db74">&#34;Content-Type&#34;</span>, <span style="color:#e6db74">&#34;application/json&#34;</span>)

	<span style="color:#75715e">// Отображение страницы
</span><span style="color:#75715e"></span>	<span style="color:#a6e22e">w</span>.<span style="color:#a6e22e">Write</span>(<span style="color:#a6e22e">output</span>)
}</code></pre></div>
<h2 id="сборка-приложения">Сборка приложения</h2>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-powershell" data-lang="powershell"><span style="color:#75715e"># Создание структуры директорий macOS-приложения</span>
mkdir -p helloworld.app/Contents/MacOS

<span style="color:#75715e"># Компилируем ./main.go в папку приложения</span>
go build -o example.app/Contents/MacOS/helloworld

<span style="color:#75715e"># Запуск приложения</span>
open helloworld.app</code></pre></div>
<p><img src="https://user-images.githubusercontent.com/11155743/59463057-bd2c9980-8e2d-11e9-84f1-7ad1aac6f98c.gif" alt="gif result" /></p>

<h2 id="кросс-компиляция-для-windows-и-gnu-linux">Кросс-компиляция для Windows и GNU/Linux</h2>

<p>Теоретический блок и приведённый в статье код — являются актуальными для разработки подобного приложения для других ОС. При этом, код остаётся неизменным.</p>

<blockquote>
<p>Пиши код один раз — запускай везде!</p>
</blockquote>

<p>Это становится возможным, благодаря кросс-системной природе Go. Вы можете с лёгкостью скомпилировать исполняемый файл вашего приложения для запуска на любой поддерживаемой операционной системе:</p>

<ul>
<li>GNU/Linux — исполняемый бинарный файл;</li>
<li>Microsoft Windows — исполняемый файл <code>.exe</code>;</li>
<li>Apple macOS — бинарный файл, расположенный внутри структуры <code>.app</code>;</li>
</ul>

<p>Мы рассмотрим это в следующих статьях.</p>

<p>Следите за обновлениями, комментируйте и пишите только хороший код!</p>

<h2 id="закрепление-материала">Закрепление материала</h2>

<p>Вы находитесь в конце статьи. Теперь вы знаете намного больше, чем 15 минут назад. Принимайте мои поздравления! 🎉</p>

<p>Отдохните 10-15 минут и восстановите в памяти прочитанный текст и изученный код из статьи. Далее, попробуйте ответить на вопросы и сделать упражнения, чтобы лучше закрепить материал.</p>

<blockquote>
<p>Да, подглядывать можно, но только если не смогли вспомнить.</p>
</blockquote>

<h3 id="вопросы">Вопросы</h3>

<ol>
<li>Какая функция стандартного Go-пакета <code>net/http</code> используется для монтирования папки на указанный адрес (route)?</li>
<li>Что делает функция <code>Marshal</code> из стандартного Go-пакета <code>encoding/json</code>?</li>
<li>Какие параметры нужно изменить в исходном коде бэкенд приложения, чтобы открылось окно с размерами Full HD?</li>
<li>Какое поведение будет у приложения (после запуска), если сделать старт веб-сервера без горутины?</li>
<li>Для чего используется команда <code>packr build ./main.go</code>?</li>
</ol>

<h3 id="упражнения">Упражнения</h3>

<ul>
<li>Перепишите код AJAX-запроса (во фронтенд приложении) без использования библиотеки <code>axios</code>. <em>Подсказка: воспользуйтесь возможностями</em> <a href="https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch" target="_blank"><em>Fetch API</em></a>.</li>
<li>Добавьте в функцию <code>showMessage</code> больше JSON данных для вывода на фронтенд. <em>Пример: добавьте новый атрибут <code>Emoji</code> в структуру <code>Message</code> и выведите его (с любимым смайлом) после атрибута <code>Text</code></em>.</li>
<li>Попробуйте усовершенствовать внешний вид своего приложения, например, с помощью библиотеки визуальных компонентов Material UI (<a href="https://github.com/mui-org/material-ui" target="_blank">GitHub</a>).</li>
</ul>
]]></content>
        </item>
        
    </channel>
</rss>
