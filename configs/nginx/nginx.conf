worker_processes  auto;

events {
  use                 epoll;
  multi_accept        on;
  worker_connections  1024;
}

http {
  charset       utf-8;
  sendfile      on;
  tcp_nopush    on;
  tcp_nodelay   on;
  server_tokens off;
  log_not_found off;

  # MIME
  include       /etc/nginx/mime.types;
  default_type  application/octet-stream;

  # Logging
  error_log  /var/log/nginx/error.log crit;
  access_log off;

  # Timeouts
  send_timeout              2;
  keepalive_timeout         30;
  keepalive_requests        100;
  client_body_timeout       10;
  reset_timedout_connection on;

  # Max body size
  client_max_body_size 4m;

  # Cache
  open_file_cache          max=200000 inactive=20s;
  open_file_cache_valid    30s;
  open_file_cache_errors   on;
  open_file_cache_min_uses 2;

  # GZip
  gzip            on;
  gzip_vary       on;
  gzip_types      text/plain text/css application/json application/x-javascript text/xml application/xml application/xml+rss text/javascript application/javascript image/svg+xml image/gif image/png image/jpeg image/x-icon image/webp;
  gzip_disable    "msie6";
  gzip_proxied    any;
  gzip_comp_level 6;

  # SSL
	ssl_session_timeout 1d;
	ssl_session_cache   shared:SSL:10m;
	ssl_session_tickets off;

  # App domain without WWW
  set $app_domain 1wa.co;

  # Mirrors domains
  set $app_domain_mirror_1 truewebartisans.com;
  set $app_domain_mirror_2 webartisans.org;

  # App server config for HTTPS
  server {
    listen      443 ssl http2;
    server_name $app_domain www.$app_domain;

    # SSL
    ssl_certificate     /etc/letsencrypt/live/$app_domain/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/$app_domain/privkey.pem;

    # Additional Nginx options
    include     /etc/letsencrypt/options-ssl-nginx.conf;

    # Diffie-Hellman parameter for DHE ciphersuites
    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem;

    # Security headers
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header Referrer-Policy "no-referrer-when-downgrade" always;
    add_header Content-Security-Policy "default-src 'self' http: https: data: blob: 'unsafe-inline'" always;
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;

    # Redirect to domain without WWW
    if ($host ~ '^www\.') { set $https_redirect 1; }
    if ($https_redirect = 1) { return 301 https://$app_domain$request_uri; }

    # Proxy for app
    location / {
      resolver                            127.0.0.11;
      proxy_pass                          http://app:8080;
      proxy_set_header Host               $host;
      proxy_set_header X-Real-IP          $remote_addr;
      proxy_set_header X-Forwarded-For    $proxy_add_x_forwarded_for;
      proxy_set_header X-Forwarded-Proto  $scheme;
    }

    # dot files
    location ~ /\.(?!well-known) { deny all; }

    # SEO files
    location = /robots.txt { log_not_found off; }
    location = /sitemap.xml { log_not_found off; }
    location = /favicon.ico { log_not_found off; }

    # Assets, media
    location ~* \.(?:css(\.map)?|js(\.map)?|jpe?g|png|gif|ico|cur|heic|webp|tiff?|mp3|m4a|aac|ogg|midi?|wav|mp4|mov|webm|mpe?g|avi|ogv|flv|wmv)$ {
      expires 7d;
    }

    # SVG, fonts
    location ~* \.(?:svgz?|ttf|ttc|otf|eot|woff2?)$ {
      add_header Access-Control-Allow-Origin "*";
      expires 7d;
    }
  }

  # App server config for register SSL (Certbot)
  server {
    listen      80;
    server_name $app_domain www.$app_domain;

    # Allow only for register SSL (Certbot)
    location ^~ /.well-known/acme-challenge { root /var/www/certbot; }

    # Redirect to HTTPS
    location / { return 301 https://$app_domain$request_uri; }
  }

  # App mirror 1 config for register SSL (Certbot)
  server {
    listen      80;
    # listen      443;
    server_name $app_domain_mirror_1 www.$app_domain_mirror_1;

    # Allow only for register SSL (Certbot)
    location ^~ /.well-known/acme-challenge { root /var/www/certbot; }

    # Redirect to HTTPS
    location / { return 301 https://$app_domain$request_uri; }
  }

  # App mirror 2 config for register SSL (Certbot)
  server {
    listen      80;
    # listen      443;
    server_name $app_domain_mirror_2 www.$app_domain_mirror_2;

    # Allow only for register SSL (Certbot)
    location ^~ /.well-known/acme-challenge { root /var/www/certbot; }

    # Redirect to HTTPS
    location / { return 301 https://$app_domain$request_uri; }
  }
}
